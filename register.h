//- ----------------------------------------------------------------------------------------------------------------------
//- load libraries -------------------------------------------------------------------------------------------------------
#include <AS.h>                                                         // the asksin framework
#include "hardware.h"                                                   // hardware definition
//#include <cmDimmer.h>
#include <cmStatusBoard.h>

//- stage modules --------------------------------------------------------------------------------------------------------
AS hm;                                                                  // asksin framework

cmStatusBoard cmStatusBoard[6];                                                 // create instances of channel module 
extern void initLedStatus(uint8_t channel);
extern void initChannel(uint8_t channel);
extern void ledStatusSwitch(uint8_t channel, uint8_t status, uint8_t button);
extern void channelSwitch(uint8_t channel, uint8_t status, uint8_t button);
uint8_t bTemperature; 

//- ----------------------------------------------------------------------------------------------------------------------
//- eeprom defaults table ------------------------------------------------------------------------------------------------
uint16_t EEMEM eMagicByte;
uint8_t  EEMEM eHMID[3]  = {0x60,0x60,0x60,};
uint8_t  EEMEM eHMSR[10] = {'X','M','S','7','2','3','4','5','6','8',};
uint8_t  EEMEM eHMKEY[16] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,};

// if HMID and Serial are not set, then eeprom ones will be used
uint8_t HMID[3] = {0x60,0x60,0x60,};
uint8_t HMSR[10] = {'X','M','S','7','2','3','4','5','6','8',};          // XMS1234567
uint8_t HMKEY[16] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,};


//- ----------------------------------------------------------------------------------------------------------------------
//- generated by createRegisterFromFile.pl
//- ID: 0x00b8, File: rf_dim_2l_644.xml
//- ----------------------------------------------------------------------------------------------------------------------

//- ----------------------------------------------------------------------------------------------------------------------
//- ----------------------------------------------------------------------------------------------------------------------
//                                   FW  moID   serial                         ST  devInfo
// <- 1A 01 A4 00 01 02 05 63 19 63  15  00 6C  74 6C 75 31 30 30 31 32 33 35  10  11 01 00 
// FW   -> Firmware, sometimes given in xml files of hm config software
// moID -> Model ID, important for identification in hm config software
// ST   -> Subtype, identifier if device is a switch or a dimmer or a remote
// devInfo -> Device Info -> sometimes hm config files are refering on byte 23 for the amount of channels, other bytes not known
//                           23:0 0.4, means first four bit of byte 23 reflecting the amount of channels
//
//- settings of HM device for AS class -----------------------------------------------------------------------------------
const uint8_t devIdnt[] PROGMEM = {
    /* Firmware version 1 byte */  0x25,
    /* Model ID         2 byte */  0x00, 0xb8,
    /* Sub Type ID      1 byte */  0x00,
    /* Device Info      3 byte */  0x41, 0x01, 0x00, 
};

//- ----------------------------------------------------------------------------------------------------------------------
//- channel slice address definition -------------------------------------------------------------------------------------
const uint8_t cnlAddr[] PROGMEM = {
    0x02, 0x0a, 0x0b, 0x0c, 0x15, 0x18,
    0x12, 0x30, 0x31, 0x56, 0x57, 0x59,
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa6, 0xa7, 0xa8, 0xa9,
};  // 72 byte

//- channel device list table --------------------------------------------------------------------------------------------
EE::s_cnlTbl cnlTbl[] = {
    // cnl, lst, sIdx, sLen, pAddr;
    {  0,  0, 0x00,  6,  0x000f, 0 },
    {  1,  1, 0x06,  6,  0x0015, 0 },
    {  1,  3, 0x0c, 60,  0x001b, 0 },
    {  2,  1, 0x06,  6,  0x0057, 0 },
    {  2,  3, 0x0c, 60,  0x005d, 0 },
    {  3,  1, 0x07,  5,  0x0099, 0 },
    {  3,  3, 0x0c, 60,  0x009e, 0 },
    {  4,  1, 0x07,  5,  0x00da, 0 },
    {  4,  3, 0x0c, 60,  0x00df, 0 },
    {  5,  1, 0x07,  5,  0x011b, 0 },
    {  5,  3, 0x0c, 60,  0x0120, 0 },
    {  6,  1, 0x07,  5,  0x015c, 0 },
    {  6,  3, 0x0c, 60,  0x0161, 0 },
};  // 78 byte

//- peer device list table -----------------------------------------------------------------------------------------------
EE::s_peerTbl peerTbl[] = {
    // cnl, pMax, pAddr;
    {  1,  1, 0x019d },
    {  2,  1, 0x01a1 },
    {  3,  1, 0x01a5 },
    {  4,  1, 0x01a9 },
    {  5,  1, 0x01ad },
    {  6,  1, 0x01b1 },
};  // 24 byte

//- handover to AskSin lib -----------------------------------------------------------------------------------------------
EE::s_devDef devDef = {
    6, 13, devIdnt, cnlAddr,
};  // 10 byte

//- module registrar -----------------------------------------------------------------------------------------------------
RG::s_modTable modTbl[6];




//=============================================================================================================================

//- ----------------------------------------------------------------------------------------------------------------------
//- first time and regular start functions -------------------------------------------------------------------------------

void everyTimeStart(void) {
	// place here everything which should be done on each start or reset of the device
	// typical use case are loading default values or user class configurations

	// init the homematic framework
	hm.confButton.config(2, CONFIG_KEY_PCIE, CONFIG_KEY_INT);           // configure the config button, mode, pci byte and pci bit
	hm.ld.init(2, &hm);                                                 // set the led
	hm.ld.set(welcome);                                                 // show something
	hm.bt.set(30, 3600000);                                             // set battery check, internal, 2.7 reference, measurement each hour
	hm.pw.setMode(0);                                                   // set power management mode

   // register user modules
  cmStatusBoard[0].regInHM(1, 3, &hm);                                    // register user module
  cmStatusBoard[0].config(&initLedStatus, &ledStatusSwitch);                          // configure user module

  cmStatusBoard[1].regInHM(2, 3, &hm);                                    // register user module
  cmStatusBoard[1].config(&initLedStatus, &ledStatusSwitch);                          // configure user module 
  
   // register user modules
  cmStatusBoard[2].regInHM(3, 3, &hm);                                    // register user module
  cmStatusBoard[2].config(&initChannel, &channelSwitch);                          // configure user module

  cmStatusBoard[3].regInHM(4, 3, &hm);                                    // register user module
  cmStatusBoard[3].config(&initChannel, &channelSwitch);                          // configure user module 
  
  cmStatusBoard[4].regInHM(5, 3, &hm);                                    // register user module
  cmStatusBoard[4].config(&initChannel, &channelSwitch);                          // configure user module 
  
  cmStatusBoard[5].regInHM(6, 3, &hm);                                    // register user module
  cmStatusBoard[5].config(&initChannel, &channelSwitch);                          // configure user module 
    
}

void firstTimeStart(void) {
	// place here everything which should be done on the first start or after a complete reset of the sketch
	// typical use case are default values which should be written into the register or peer database

}
